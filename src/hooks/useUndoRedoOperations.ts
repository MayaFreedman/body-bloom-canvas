
import { useCallback } from 'react';
import { useStrokeManager } from './useStrokeManager';
import { useActionHistory } from './useActionHistory';

interface UseUndoRedoOperationsProps {
  strokeManager: ReturnType<typeof useStrokeManager>;
  actionHistory: ReturnType<typeof useActionHistory>;
  setBodyPartColors: React.Dispatch<React.SetStateAction<Record<string, string>>>;
}

export const useUndoRedoOperations = ({
  strokeManager,
  actionHistory,
  setBodyPartColors
}: UseUndoRedoOperationsProps) => {
  const handleUndo = useCallback(() => {
    console.log('üîÑ Global handleUndo called');
    const actionToUndo = actionHistory.undo();
    
    if (!actionToUndo) {
      console.log('‚ùå No action to undo');
      return null;
    }
    
    console.log('üîÑ Undoing global action:', actionToUndo?.type, 'by user:', actionToUndo?.userId);
    
    switch (actionToUndo.type) {
      case 'draw':
        console.log('‚Ü©Ô∏è Undoing draw action with strokes:', actionToUndo.data.strokes?.length);
        if (actionToUndo.data.strokes) {
          actionToUndo.data.strokes.forEach(stroke => {
            console.log('üóëÔ∏è Removing stroke:', stroke.id);
            strokeManager.removeStroke(stroke.id);
          });
        }
        break;
      case 'erase':
        console.log('‚Ü©Ô∏è Undoing erase action by restoring strokes');
        if (actionToUndo.data.strokes) {
          actionToUndo.data.strokes.forEach(stroke => {
            console.log('‚ôªÔ∏è Restoring erased stroke:', stroke.id);
            strokeManager.restoreStroke(stroke);
          });
        }
        break;
      case 'fill':
        console.log('‚Ü©Ô∏è Undoing fill action');
        if (actionToUndo.data.previousBodyPartColors !== undefined) {
          console.log('üé® Restoring previous colors:', actionToUndo.data.previousBodyPartColors);
          setBodyPartColors(actionToUndo.data.previousBodyPartColors);
        }
        break;
      case 'clear':
        console.log('‚Ü©Ô∏è Undoing clear action by restoring all cleared content');
        if (actionToUndo.data.strokes) {
          actionToUndo.data.strokes.forEach(stroke => {
            console.log('‚ôªÔ∏è Restoring cleared stroke:', stroke.id);
            strokeManager.restoreStroke(stroke);
          });
        }
        if (actionToUndo.data.previousBodyPartColors !== undefined) {
          console.log('üé® Restoring cleared colors:', actionToUndo.data.previousBodyPartColors);
          setBodyPartColors(actionToUndo.data.previousBodyPartColors);
        }
        break;
      default:
        console.log('‚ö†Ô∏è Unknown action type to undo:', actionToUndo.type);
    }
    
    return actionToUndo;
  }, [actionHistory, strokeManager, setBodyPartColors]);

  const handleRedo = useCallback(() => {
    console.log('üîÑ Global handleRedo called');
    const actionToRedo = actionHistory.redo();
    
    if (!actionToRedo) {
      console.log('‚ùå No action to redo');
      return null;
    }
    
    console.log('üîÑ Redoing global action:', actionToRedo?.type, 'by user:', actionToRedo?.userId);
    
    switch (actionToRedo.type) {
      case 'draw':
        console.log('‚Ü™Ô∏è Redoing draw action');
        if (actionToRedo.data.strokes) {
          actionToRedo.data.strokes.forEach(stroke => {
            console.log('‚ôªÔ∏è Restoring stroke:', stroke.id);
            strokeManager.restoreStroke(stroke);
          });
        }
        break;
      case 'erase':
        console.log('‚Ü™Ô∏è Redoing erase action');
        if (actionToRedo.data.strokes) {
          actionToRedo.data.strokes.forEach(stroke => {
            console.log('üóëÔ∏è Removing stroke again:', stroke.id);
            strokeManager.removeStroke(stroke.id);
          });
        }
        break;
      case 'fill':
        console.log('‚Ü™Ô∏è Redoing fill action');
        if (actionToRedo.data.bodyPartColors) {
          console.log('üé® Applying colors again:', actionToRedo.data.bodyPartColors);
          setBodyPartColors(prev => ({
            ...prev,
            ...actionToRedo.data.bodyPartColors
          }));
        }
        break;
      case 'clear':
        console.log('‚Ü™Ô∏è Redoing clear action');
        if (actionToRedo.data.strokes) {
          actionToRedo.data.strokes.forEach(stroke => {
            console.log('üóëÔ∏è Removing stroke again:', stroke.id);
            strokeManager.removeStroke(stroke.id);
          });
        }
        if (actionToRedo.data.bodyPartColors !== undefined) {
          console.log('üé® Clearing colors again');
          setBodyPartColors({});
        }
        break;
      default:
        console.log('‚ö†Ô∏è Unknown action type to redo:', actionToRedo.type);
    }
    
    return actionToRedo;
  }, [actionHistory, strokeManager, setBodyPartColors]);

  return {
    handleUndo,
    handleRedo
  };
};
